//
// Copyright 2021 OpsMx, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: internal/tunnel/tunnel.proto

package tunnel

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts uint64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts       uint64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	EchoedTs uint64 `protobuf:"varint,2,opt,name=echoedTs,proto3" json:"echoedTs,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *PingResponse) GetEchoedTs() uint64 {
	if x != nil {
		return x.EchoedTs
	}
	return 0
}

type HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *HttpHeader) Reset() {
	*x = HttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader) ProtoMessage() {}

func (x *HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpHeader) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *HttpHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpHeader) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type OpenHTTPTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type    string        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Method  string        `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	URI     string        `protobuf:"bytes,5,opt,name=URI,proto3" json:"URI,omitempty"`
	Headers []*HttpHeader `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"`
	Body    []byte        `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *OpenHTTPTunnelRequest) Reset() {
	*x = OpenHTTPTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenHTTPTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenHTTPTunnelRequest) ProtoMessage() {}

func (x *OpenHTTPTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenHTTPTunnelRequest.ProtoReflect.Descriptor instead.
func (*OpenHTTPTunnelRequest) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *OpenHTTPTunnelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OpenHTTPTunnelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpenHTTPTunnelRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OpenHTTPTunnelRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *OpenHTTPTunnelRequest) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *OpenHTTPTunnelRequest) GetHeaders() []*HttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *OpenHTTPTunnelRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type CancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelRequest) Reset() {
	*x = CancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequest) ProtoMessage() {}

func (x *CancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequest.ProtoReflect.Descriptor instead.
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *CancelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// This is the initial response sent to the controller from the agent.
// The body is sent back in a series of HttpChunkedResponse messages,
// with a zero length meaning EOF.
type HttpTunnelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        int32         `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Headers       []*HttpHeader `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	ContentLength int64         `protobuf:"varint,4,opt,name=contentLength,proto3" json:"contentLength,omitempty"`
}

func (x *HttpTunnelResponse) Reset() {
	*x = HttpTunnelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpTunnelResponse) ProtoMessage() {}

func (x *HttpTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpTunnelResponse.ProtoReflect.Descriptor instead.
func (*HttpTunnelResponse) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *HttpTunnelResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HttpTunnelResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HttpTunnelResponse) GetHeaders() []*HttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpTunnelResponse) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

type HttpTunnelChunkedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Body []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *HttpTunnelChunkedResponse) Reset() {
	*x = HttpTunnelChunkedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpTunnelChunkedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpTunnelChunkedResponse) ProtoMessage() {}

func (x *HttpTunnelChunkedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpTunnelChunkedResponse.ProtoReflect.Descriptor instead.
func (*HttpTunnelChunkedResponse) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *HttpTunnelChunkedResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HttpTunnelChunkedResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type EndpointHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type       string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Configured bool     `protobuf:"varint,3,opt,name=configured,proto3" json:"configured,omitempty"`
	Namespaces []string `protobuf:"bytes,4,rep,name=namespaces,proto3" json:"namespaces,omitempty"` // used for kubernetes mostly
	AccountID  string   `protobuf:"bytes,5,opt,name=accountID,proto3" json:"accountID,omitempty"`   // AWS
	AssumeRole string   `protobuf:"bytes,6,opt,name=assumeRole,proto3" json:"assumeRole,omitempty"` // AWS
}

func (x *EndpointHealth) Reset() {
	*x = EndpointHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointHealth) ProtoMessage() {}

func (x *EndpointHealth) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointHealth.ProtoReflect.Descriptor instead.
func (*EndpointHealth) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{7}
}

func (x *EndpointHealth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EndpointHealth) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EndpointHealth) GetConfigured() bool {
	if x != nil {
		return x.Configured
	}
	return false
}

func (x *EndpointHealth) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *EndpointHealth) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *EndpointHealth) GetAssumeRole() string {
	if x != nil {
		return x.AssumeRole
	}
	return ""
}

type AgentInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *AgentInformation) Reset() {
	*x = AgentInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInformation) ProtoMessage() {}

func (x *AgentInformation) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInformation.ProtoReflect.Descriptor instead.
func (*AgentInformation) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{8}
}

func (x *AgentInformation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints         []*EndpointHealth `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Version           string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Hostname          string            `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ClientCertificate []byte            `protobuf:"bytes,4,opt,name=clientCertificate,proto3" json:"clientCertificate,omitempty"` // used when we can't terminate SSL directly
	AgentInfo         *AgentInformation `protobuf:"bytes,5,opt,name=agentInfo,proto3" json:"agentInfo,omitempty"`
}

func (x *Hello) Reset() {
	*x = Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hello) ProtoMessage() {}

func (x *Hello) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hello.ProtoReflect.Descriptor instead.
func (*Hello) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{9}
}

func (x *Hello) GetEndpoints() []*EndpointHealth {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Hello) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Hello) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Hello) GetClientCertificate() []byte {
	if x != nil {
		return x.ClientCertificate
	}
	return nil
}

func (x *Hello) GetAgentInfo() *AgentInformation {
	if x != nil {
		return x.AgentInfo
	}
	return nil
}

type HttpTunnelControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ControlType:
	//	*HttpTunnelControl_OpenHTTPTunnelRequest
	//	*HttpTunnelControl_CancelRequest
	//	*HttpTunnelControl_HttpTunnelResponse
	//	*HttpTunnelControl_HttpTunnelChunkedResponse
	ControlType isHttpTunnelControl_ControlType `protobuf_oneof:"controlType"`
}

func (x *HttpTunnelControl) Reset() {
	*x = HttpTunnelControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpTunnelControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpTunnelControl) ProtoMessage() {}

func (x *HttpTunnelControl) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpTunnelControl.ProtoReflect.Descriptor instead.
func (*HttpTunnelControl) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{10}
}

func (m *HttpTunnelControl) GetControlType() isHttpTunnelControl_ControlType {
	if m != nil {
		return m.ControlType
	}
	return nil
}

func (x *HttpTunnelControl) GetOpenHTTPTunnelRequest() *OpenHTTPTunnelRequest {
	if x, ok := x.GetControlType().(*HttpTunnelControl_OpenHTTPTunnelRequest); ok {
		return x.OpenHTTPTunnelRequest
	}
	return nil
}

func (x *HttpTunnelControl) GetCancelRequest() *CancelRequest {
	if x, ok := x.GetControlType().(*HttpTunnelControl_CancelRequest); ok {
		return x.CancelRequest
	}
	return nil
}

func (x *HttpTunnelControl) GetHttpTunnelResponse() *HttpTunnelResponse {
	if x, ok := x.GetControlType().(*HttpTunnelControl_HttpTunnelResponse); ok {
		return x.HttpTunnelResponse
	}
	return nil
}

func (x *HttpTunnelControl) GetHttpTunnelChunkedResponse() *HttpTunnelChunkedResponse {
	if x, ok := x.GetControlType().(*HttpTunnelControl_HttpTunnelChunkedResponse); ok {
		return x.HttpTunnelChunkedResponse
	}
	return nil
}

type isHttpTunnelControl_ControlType interface {
	isHttpTunnelControl_ControlType()
}

type HttpTunnelControl_OpenHTTPTunnelRequest struct {
	OpenHTTPTunnelRequest *OpenHTTPTunnelRequest `protobuf:"bytes,1,opt,name=openHTTPTunnelRequest,proto3,oneof"`
}

type HttpTunnelControl_CancelRequest struct {
	CancelRequest *CancelRequest `protobuf:"bytes,2,opt,name=cancelRequest,proto3,oneof"`
}

type HttpTunnelControl_HttpTunnelResponse struct {
	HttpTunnelResponse *HttpTunnelResponse `protobuf:"bytes,3,opt,name=httpTunnelResponse,proto3,oneof"`
}

type HttpTunnelControl_HttpTunnelChunkedResponse struct {
	HttpTunnelChunkedResponse *HttpTunnelChunkedResponse `protobuf:"bytes,4,opt,name=httpTunnelChunkedResponse,proto3,oneof"`
}

func (*HttpTunnelControl_OpenHTTPTunnelRequest) isHttpTunnelControl_ControlType() {}

func (*HttpTunnelControl_CancelRequest) isHttpTunnelControl_ControlType() {}

func (*HttpTunnelControl_HttpTunnelResponse) isHttpTunnelControl_ControlType() {}

func (*HttpTunnelControl_HttpTunnelChunkedResponse) isHttpTunnelControl_ControlType() {}

// Messages sent from controller to agent, or agent to controller
type MessageWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*MessageWrapper_PingRequest
	//	*MessageWrapper_PingResponse
	//	*MessageWrapper_Hello
	//	*MessageWrapper_HttpTunnelControl
	Event isMessageWrapper_Event `protobuf_oneof:"event"`
}

func (x *MessageWrapper) Reset() {
	*x = MessageWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_tunnel_tunnel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWrapper) ProtoMessage() {}

func (x *MessageWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_internal_tunnel_tunnel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWrapper.ProtoReflect.Descriptor instead.
func (*MessageWrapper) Descriptor() ([]byte, []int) {
	return file_internal_tunnel_tunnel_proto_rawDescGZIP(), []int{11}
}

func (m *MessageWrapper) GetEvent() isMessageWrapper_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *MessageWrapper) GetPingRequest() *PingRequest {
	if x, ok := x.GetEvent().(*MessageWrapper_PingRequest); ok {
		return x.PingRequest
	}
	return nil
}

func (x *MessageWrapper) GetPingResponse() *PingResponse {
	if x, ok := x.GetEvent().(*MessageWrapper_PingResponse); ok {
		return x.PingResponse
	}
	return nil
}

func (x *MessageWrapper) GetHello() *Hello {
	if x, ok := x.GetEvent().(*MessageWrapper_Hello); ok {
		return x.Hello
	}
	return nil
}

func (x *MessageWrapper) GetHttpTunnelControl() *HttpTunnelControl {
	if x, ok := x.GetEvent().(*MessageWrapper_HttpTunnelControl); ok {
		return x.HttpTunnelControl
	}
	return nil
}

type isMessageWrapper_Event interface {
	isMessageWrapper_Event()
}

type MessageWrapper_PingRequest struct {
	PingRequest *PingRequest `protobuf:"bytes,1,opt,name=pingRequest,proto3,oneof"`
}

type MessageWrapper_PingResponse struct {
	PingResponse *PingResponse `protobuf:"bytes,2,opt,name=pingResponse,proto3,oneof"`
}

type MessageWrapper_Hello struct {
	Hello *Hello `protobuf:"bytes,3,opt,name=hello,proto3,oneof"`
}

type MessageWrapper_HttpTunnelControl struct {
	HttpTunnelControl *HttpTunnelControl `protobuf:"bytes,4,opt,name=httpTunnelControl,proto3,oneof"`
}

func (*MessageWrapper_PingRequest) isMessageWrapper_Event() {}

func (*MessageWrapper_PingResponse) isMessageWrapper_Event() {}

func (*MessageWrapper_Hello) isMessageWrapper_Event() {}

func (*MessageWrapper_HttpTunnelControl) isMessageWrapper_Event() {}

var File_internal_tunnel_tunnel_proto protoreflect.FileDescriptor

var file_internal_tunnel_tunnel_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x1d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x63, 0x68, 0x6f, 0x65, 0x64, 0x54,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x63, 0x68, 0x6f, 0x65, 0x64, 0x54,
	0x73, 0x22, 0x38, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x15,
	0x4f, 0x70, 0x65, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x49, 0x12, 0x2c, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x1f, 0x0a, 0x0d, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x48,
	0x74, 0x74, 0x70, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x3f, 0x0a,
	0x19, 0x48, 0x74, 0x74, 0x70, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xb6,
	0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x34, 0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x01,
	0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe9, 0x02, 0x0a, 0x11, 0x48, 0x74,
	0x74, 0x70, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x55, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x54, 0x54, 0x50,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x15, 0x6f, 0x70, 0x65, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x12, 0x68, 0x74, 0x74, 0x70, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x19, 0x68, 0x74, 0x74, 0x70, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x68, 0x74, 0x74,
	0x70, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x49, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x68, 0x74,
	0x74, 0x70, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42,
	0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x59, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43,
	0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x2e,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_tunnel_tunnel_proto_rawDescOnce sync.Once
	file_internal_tunnel_tunnel_proto_rawDescData = file_internal_tunnel_tunnel_proto_rawDesc
)

func file_internal_tunnel_tunnel_proto_rawDescGZIP() []byte {
	file_internal_tunnel_tunnel_proto_rawDescOnce.Do(func() {
		file_internal_tunnel_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_tunnel_tunnel_proto_rawDescData)
	})
	return file_internal_tunnel_tunnel_proto_rawDescData
}

var file_internal_tunnel_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_internal_tunnel_tunnel_proto_goTypes = []interface{}{
	(*PingRequest)(nil),               // 0: tunnel.PingRequest
	(*PingResponse)(nil),              // 1: tunnel.PingResponse
	(*HttpHeader)(nil),                // 2: tunnel.HttpHeader
	(*OpenHTTPTunnelRequest)(nil),     // 3: tunnel.OpenHTTPTunnelRequest
	(*CancelRequest)(nil),             // 4: tunnel.CancelRequest
	(*HttpTunnelResponse)(nil),        // 5: tunnel.HttpTunnelResponse
	(*HttpTunnelChunkedResponse)(nil), // 6: tunnel.HttpTunnelChunkedResponse
	(*EndpointHealth)(nil),            // 7: tunnel.EndpointHealth
	(*AgentInformation)(nil),          // 8: tunnel.AgentInformation
	(*Hello)(nil),                     // 9: tunnel.Hello
	(*HttpTunnelControl)(nil),         // 10: tunnel.HttpTunnelControl
	(*MessageWrapper)(nil),            // 11: tunnel.MessageWrapper
}
var file_internal_tunnel_tunnel_proto_depIdxs = []int32{
	2,  // 0: tunnel.OpenHTTPTunnelRequest.headers:type_name -> tunnel.HttpHeader
	2,  // 1: tunnel.HttpTunnelResponse.headers:type_name -> tunnel.HttpHeader
	7,  // 2: tunnel.Hello.endpoints:type_name -> tunnel.EndpointHealth
	8,  // 3: tunnel.Hello.agentInfo:type_name -> tunnel.AgentInformation
	3,  // 4: tunnel.HttpTunnelControl.openHTTPTunnelRequest:type_name -> tunnel.OpenHTTPTunnelRequest
	4,  // 5: tunnel.HttpTunnelControl.cancelRequest:type_name -> tunnel.CancelRequest
	5,  // 6: tunnel.HttpTunnelControl.httpTunnelResponse:type_name -> tunnel.HttpTunnelResponse
	6,  // 7: tunnel.HttpTunnelControl.httpTunnelChunkedResponse:type_name -> tunnel.HttpTunnelChunkedResponse
	0,  // 8: tunnel.MessageWrapper.pingRequest:type_name -> tunnel.PingRequest
	1,  // 9: tunnel.MessageWrapper.pingResponse:type_name -> tunnel.PingResponse
	9,  // 10: tunnel.MessageWrapper.hello:type_name -> tunnel.Hello
	10, // 11: tunnel.MessageWrapper.httpTunnelControl:type_name -> tunnel.HttpTunnelControl
	11, // 12: tunnel.AgentTunnelService.EventTunnel:input_type -> tunnel.MessageWrapper
	11, // 13: tunnel.AgentTunnelService.EventTunnel:output_type -> tunnel.MessageWrapper
	13, // [13:14] is the sub-list for method output_type
	12, // [12:13] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_internal_tunnel_tunnel_proto_init() }
func file_internal_tunnel_tunnel_proto_init() {
	if File_internal_tunnel_tunnel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_tunnel_tunnel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_tunnel_tunnel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_tunnel_tunnel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_tunnel_tunnel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenHTTPTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_tunnel_tunnel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_tunnel_tunnel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpTunnelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_tunnel_tunnel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpTunnelChunkedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_tunnel_tunnel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_tunnel_tunnel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_tunnel_tunnel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_tunnel_tunnel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpTunnelControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_tunnel_tunnel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_tunnel_tunnel_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*HttpTunnelControl_OpenHTTPTunnelRequest)(nil),
		(*HttpTunnelControl_CancelRequest)(nil),
		(*HttpTunnelControl_HttpTunnelResponse)(nil),
		(*HttpTunnelControl_HttpTunnelChunkedResponse)(nil),
	}
	file_internal_tunnel_tunnel_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*MessageWrapper_PingRequest)(nil),
		(*MessageWrapper_PingResponse)(nil),
		(*MessageWrapper_Hello)(nil),
		(*MessageWrapper_HttpTunnelControl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_tunnel_tunnel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_tunnel_tunnel_proto_goTypes,
		DependencyIndexes: file_internal_tunnel_tunnel_proto_depIdxs,
		MessageInfos:      file_internal_tunnel_tunnel_proto_msgTypes,
	}.Build()
	File_internal_tunnel_tunnel_proto = out.File
	file_internal_tunnel_tunnel_proto_rawDesc = nil
	file_internal_tunnel_tunnel_proto_goTypes = nil
	file_internal_tunnel_tunnel_proto_depIdxs = nil
}
