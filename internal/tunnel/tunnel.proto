/*
 * Copyright 2021-2023 OpsMx, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package tunnel;

option go_package = "./;tunnel";

message Annotation {
    string name = 1;
    string value = 2;
}

message EndpointHealth {
    string name = 1;
    string type = 2;
    bool configured = 3;
    repeated string namespaces = 4; // used for kubernetes mostly
    repeated Annotation annotations = 7;
}

message HelloRequest {
    repeated EndpointHealth endpoints = 3;
    string version = 4;
    AgentInfo agentInfo = 5;
    string hostname = 6;
}

message AgentInfo {
    repeated Annotation annotations = 1;
}

message HelloResponse {
    string agentId = 1;
    string instanceId = 2;
    repeated EndpointHealth endpoints = 3;
    string version = 4;
    repeated Annotation annotations = 5;
}

message Data {
    string streamId = 1;
    bytes data = 3;
}

message TunnelHeaders {
    string streamId = 1;
    int32 statusCode = 3;
    repeated HttpHeader headers = 4;
    int64 contentLength = 5;
}

message HttpHeader {
    string name = 1;
    repeated string values = 2;
}

message WaitForRequestArgs {}

// TunnelRequest causes the receiving side to begin an HTTP tunnel.
message TunnelRequest {
    string streamId = 1;
    string name = 3;
    string type = 4;
    string method = 5;
    string URI = 6;
    repeated HttpHeader headers = 7;
    bytes body = 8;
}

message StartTunnelResponse {
    string streamId = 1;
}

message Cancel {}

message Done {}

message StreamFlow {
    oneof event {
        string streamId = 1;
        TunnelHeaders headers = 2;
        Data data = 3;
        Cancel cancel = 4;
        Done done = 5;
    }
}

message StreamFlowResponse {}

message PingRequest {
    uint64 ts = 3;
}

message PingResponse {
    uint64 ts = 3;
    uint64 echoedTs = 4;
}

// Service (runs on the controller)
service TunnelService {
    // Initial handshake, sent from agent to controller on the control connection, before any other messages.
    rpc Hello(HelloRequest) returns (HelloResponse) {}

    // Keep alive, sent from the agent to the controller, on control and data connections.
    rpc Ping(PingRequest) returns (PingResponse) {}

    // The agent will call StartRequest() when it wants the controller to perform
    // an HTTP fetch.
    rpc StartTunnel(TunnelRequest) returns (TunnelHeaders) {}

    // The agent will perform a long-running call to WaitForRequest() and handle
    // any HTTP request found.
    rpc WaitForRequest(WaitForRequestArgs) returns (stream TunnelRequest) {}

    // DataFlowAgentToController is the conduit for an agent to send and manage the
    // flow of data for a specific HTTP response.
    rpc DataFlowAgentToController(stream StreamFlow) returns (StreamFlowResponse) {}
}
