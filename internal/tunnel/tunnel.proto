/*
 * Copyright 2021 OpsMx, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 syntax = "proto3";

package tunnel;

option go_package = "./;tunnel";

message PingRequest {
    uint64 ts = 1;
}

message PingResponse {
    uint64 ts = 1;
    uint64 echoedTs = 2;
}

message HttpHeader {
    string name = 1;
    repeated string values = 2;
}

message OpenHTTPTunnelRequest {
    string id = 1;
    string name = 2;
    string type = 3;
    string method = 4;
    string URI = 5;
    repeated HttpHeader headers = 6;
    bytes body = 7;
}

message CancelRequest {
    string id = 1;
}

// This is the initial response sent to the controller from the agent.
// The body is sent back in a series of HttpChunkedResponse messages,
// with a zero length meaning EOF.
message HttpTunnelResponse {
    string id = 1;
    int32 status = 2;
    repeated HttpHeader headers = 3;
    int64 contentLength = 4;
}

message HttpTunnelChunkedResponse {
    string id = 1;
    bytes body = 2;
}

message EndpointHealth {
    string name = 1;
    string type = 2;
    bool configured = 3;
    repeated string namespaces = 4; // used for kubernetes mostly
    string accountID = 5; // AWS
    string assumeRole = 6; // AWS
}

message Hello {
    repeated EndpointHealth endpoints = 1;
    string version = 2;
    string hostname = 3;
    bytes clientCertificate = 4; // used when we can't terminate SSL directly
}

message HttpTunnelControl {
    oneof controlType {
        OpenHTTPTunnelRequest openHTTPTunnelRequest = 1;
        CancelRequest cancelRequest = 2;
        HttpTunnelResponse httpTunnelResponse = 3;
        HttpTunnelChunkedResponse httpTunnelChunkedResponse = 4;
    }
}

// Messages sent from controller to agent, or agent to controller
message MessageWrapper {
    oneof event {
        PingRequest pingRequest = 1;
        PingResponse pingResponse = 2;
        Hello hello = 3;
        HttpTunnelControl httpTunnelControl = 4;
    }
}

//
// Service (runs on the controller)
//

service AgentTunnelService {
    rpc EventTunnel(stream MessageWrapper) returns (stream MessageWrapper) {}
}
