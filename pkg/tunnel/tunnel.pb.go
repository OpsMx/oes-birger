// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.7
// source: pkg/tunnel/tunnel.proto

package tunnel

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ChannelDirection int32

const (
	ChannelDirection_STDIN  ChannelDirection = 0
	ChannelDirection_STDOUT ChannelDirection = 1
	ChannelDirection_STDERR ChannelDirection = 2
)

// Enum value maps for ChannelDirection.
var (
	ChannelDirection_name = map[int32]string{
		0: "STDIN",
		1: "STDOUT",
		2: "STDERR",
	}
	ChannelDirection_value = map[string]int32{
		"STDIN":  0,
		"STDOUT": 1,
		"STDERR": 2,
	}
)

func (x ChannelDirection) Enum() *ChannelDirection {
	p := new(ChannelDirection)
	*p = x
	return p
}

func (x ChannelDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_tunnel_tunnel_proto_enumTypes[0].Descriptor()
}

func (ChannelDirection) Type() protoreflect.EnumType {
	return &file_pkg_tunnel_tunnel_proto_enumTypes[0]
}

func (x ChannelDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelDirection.Descriptor instead.
func (ChannelDirection) EnumDescriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{0}
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts uint64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts       uint64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	EchoedTs uint64 `protobuf:"varint,2,opt,name=echoedTs,proto3" json:"echoedTs,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *PingResponse) GetEchoedTs() uint64 {
	if x != nil {
		return x.EchoedTs
	}
	return 0
}

type HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *HttpHeader) Reset() {
	*x = HttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader) ProtoMessage() {}

func (x *HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpHeader) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *HttpHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpHeader) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type HttpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type    string        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Method  string        `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	URI     string        `protobuf:"bytes,5,opt,name=URI,proto3" json:"URI,omitempty"`
	Headers []*HttpHeader `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"`
	Body    []byte        `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *HttpRequest) Reset() {
	*x = HttpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequest) ProtoMessage() {}

func (x *HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequest.ProtoReflect.Descriptor instead.
func (*HttpRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *HttpRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HttpRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HttpRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpRequest) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *HttpRequest) GetHeaders() []*HttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type CancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelRequest) Reset() {
	*x = CancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequest) ProtoMessage() {}

func (x *CancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequest.ProtoReflect.Descriptor instead.
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *CancelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// This is the initial response sent to the controller from the agent.
// The body is sent back in a series of HttpChunkedResponse messages,
// with a zero length meaning EOF.
type HttpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        int32         `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Headers       []*HttpHeader `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	ContentLength int64         `protobuf:"varint,4,opt,name=contentLength,proto3" json:"contentLength,omitempty"`
}

func (x *HttpResponse) Reset() {
	*x = HttpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResponse) ProtoMessage() {}

func (x *HttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResponse.ProtoReflect.Descriptor instead.
func (*HttpResponse) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *HttpResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HttpResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HttpResponse) GetHeaders() []*HttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpResponse) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

type HttpChunkedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Body []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *HttpChunkedResponse) Reset() {
	*x = HttpChunkedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpChunkedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpChunkedResponse) ProtoMessage() {}

func (x *HttpChunkedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpChunkedResponse.ProtoReflect.Descriptor instead.
func (*HttpChunkedResponse) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *HttpChunkedResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HttpChunkedResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Arguments   []string `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Environment []string `protobuf:"bytes,4,rep,name=environment,proto3" json:"environment,omitempty"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{7}
}

func (x *CommandRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommandRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommandRequest) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *CommandRequest) GetEnvironment() []string {
	if x != nil {
		return x.Environment
	}
	return nil
}

// A simplified message, used for command-tool <-> controller communication.
// This does not have the "id" or "target" field, as these are set by
// the controller based on authentication used.
type CmdToolCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arguments   []string `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Environment []string `protobuf:"bytes,3,rep,name=environment,proto3" json:"environment,omitempty"`
}

func (x *CmdToolCommandRequest) Reset() {
	*x = CmdToolCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdToolCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdToolCommandRequest) ProtoMessage() {}

func (x *CmdToolCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdToolCommandRequest.ProtoReflect.Descriptor instead.
func (*CmdToolCommandRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{8}
}

func (x *CmdToolCommandRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CmdToolCommandRequest) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *CmdToolCommandRequest) GetEnvironment() []string {
	if x != nil {
		return x.Environment
	}
	return nil
}

type CommandData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Body    []byte           `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Channel ChannelDirection `protobuf:"varint,3,opt,name=channel,proto3,enum=tunnel.ChannelDirection" json:"channel,omitempty"`
	Closed  bool             `protobuf:"varint,4,opt,name=Closed,proto3" json:"Closed,omitempty"`
}

func (x *CommandData) Reset() {
	*x = CommandData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandData) ProtoMessage() {}

func (x *CommandData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandData.ProtoReflect.Descriptor instead.
func (*CommandData) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{9}
}

func (x *CommandData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommandData) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CommandData) GetChannel() ChannelDirection {
	if x != nil {
		return x.Channel
	}
	return ChannelDirection_STDIN
}

func (x *CommandData) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

// A simplified message, used for command-tool <-> controller communication.
// This does not have the "id" or "target" field, as these are set by
// the controller based on authentication used.
type CmdToolCommandData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body    []byte           `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Channel ChannelDirection `protobuf:"varint,2,opt,name=channel,proto3,enum=tunnel.ChannelDirection" json:"channel,omitempty"`
	Closed  bool             `protobuf:"varint,3,opt,name=Closed,proto3" json:"Closed,omitempty"`
}

func (x *CmdToolCommandData) Reset() {
	*x = CmdToolCommandData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdToolCommandData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdToolCommandData) ProtoMessage() {}

func (x *CmdToolCommandData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdToolCommandData.ProtoReflect.Descriptor instead.
func (*CmdToolCommandData) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{10}
}

func (x *CmdToolCommandData) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CmdToolCommandData) GetChannel() ChannelDirection {
	if x != nil {
		return x.Channel
	}
	return ChannelDirection_STDIN
}

func (x *CmdToolCommandData) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

type CommandTermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExitCode int32  `protobuf:"varint,2,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CommandTermination) Reset() {
	*x = CommandTermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandTermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandTermination) ProtoMessage() {}

func (x *CommandTermination) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandTermination.ProtoReflect.Descriptor instead.
func (*CommandTermination) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{11}
}

func (x *CommandTermination) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommandTermination) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *CommandTermination) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// A simplified message, used for command-tool <-> controller communication.
// This does not have the "id" or "target" field, as these are set by
// the controller based on authentication used.
type CmdToolCommandTermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode int32  `protobuf:"varint,1,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CmdToolCommandTermination) Reset() {
	*x = CmdToolCommandTermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdToolCommandTermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdToolCommandTermination) ProtoMessage() {}

func (x *CmdToolCommandTermination) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdToolCommandTermination.ProtoReflect.Descriptor instead.
func (*CmdToolCommandTermination) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{12}
}

func (x *CmdToolCommandTermination) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *CmdToolCommandTermination) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EndpointHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Configured bool   `protobuf:"varint,3,opt,name=configured,proto3" json:"configured,omitempty"`
}

func (x *EndpointHealth) Reset() {
	*x = EndpointHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointHealth) ProtoMessage() {}

func (x *EndpointHealth) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointHealth.ProtoReflect.Descriptor instead.
func (*EndpointHealth) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{13}
}

func (x *EndpointHealth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EndpointHealth) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EndpointHealth) GetConfigured() bool {
	if x != nil {
		return x.Configured
	}
	return false
}

type AgentHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints []*EndpointHealth `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *AgentHello) Reset() {
	*x = AgentHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentHello) ProtoMessage() {}

func (x *AgentHello) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentHello.ProtoReflect.Descriptor instead.
func (*AgentHello) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{14}
}

func (x *AgentHello) GetEndpoints() []*EndpointHealth {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// Messages sent from server to agent
type ControllerToAgentWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*ControllerToAgentWrapper_PingResponse
	//	*ControllerToAgentWrapper_HttpRequest
	//	*ControllerToAgentWrapper_CancelRequest
	//	*ControllerToAgentWrapper_CommandRequest
	//	*ControllerToAgentWrapper_CommandData
	Event isControllerToAgentWrapper_Event `protobuf_oneof:"event"`
}

func (x *ControllerToAgentWrapper) Reset() {
	*x = ControllerToAgentWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerToAgentWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerToAgentWrapper) ProtoMessage() {}

func (x *ControllerToAgentWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerToAgentWrapper.ProtoReflect.Descriptor instead.
func (*ControllerToAgentWrapper) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{15}
}

func (m *ControllerToAgentWrapper) GetEvent() isControllerToAgentWrapper_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ControllerToAgentWrapper) GetPingResponse() *PingResponse {
	if x, ok := x.GetEvent().(*ControllerToAgentWrapper_PingResponse); ok {
		return x.PingResponse
	}
	return nil
}

func (x *ControllerToAgentWrapper) GetHttpRequest() *HttpRequest {
	if x, ok := x.GetEvent().(*ControllerToAgentWrapper_HttpRequest); ok {
		return x.HttpRequest
	}
	return nil
}

func (x *ControllerToAgentWrapper) GetCancelRequest() *CancelRequest {
	if x, ok := x.GetEvent().(*ControllerToAgentWrapper_CancelRequest); ok {
		return x.CancelRequest
	}
	return nil
}

func (x *ControllerToAgentWrapper) GetCommandRequest() *CommandRequest {
	if x, ok := x.GetEvent().(*ControllerToAgentWrapper_CommandRequest); ok {
		return x.CommandRequest
	}
	return nil
}

func (x *ControllerToAgentWrapper) GetCommandData() *CommandData {
	if x, ok := x.GetEvent().(*ControllerToAgentWrapper_CommandData); ok {
		return x.CommandData
	}
	return nil
}

type isControllerToAgentWrapper_Event interface {
	isControllerToAgentWrapper_Event()
}

type ControllerToAgentWrapper_PingResponse struct {
	PingResponse *PingResponse `protobuf:"bytes,1,opt,name=pingResponse,proto3,oneof"`
}

type ControllerToAgentWrapper_HttpRequest struct {
	HttpRequest *HttpRequest `protobuf:"bytes,2,opt,name=httpRequest,proto3,oneof"`
}

type ControllerToAgentWrapper_CancelRequest struct {
	CancelRequest *CancelRequest `protobuf:"bytes,3,opt,name=cancelRequest,proto3,oneof"`
}

type ControllerToAgentWrapper_CommandRequest struct {
	CommandRequest *CommandRequest `protobuf:"bytes,4,opt,name=commandRequest,proto3,oneof"`
}

type ControllerToAgentWrapper_CommandData struct {
	CommandData *CommandData `protobuf:"bytes,5,opt,name=commandData,proto3,oneof"`
}

func (*ControllerToAgentWrapper_PingResponse) isControllerToAgentWrapper_Event() {}

func (*ControllerToAgentWrapper_HttpRequest) isControllerToAgentWrapper_Event() {}

func (*ControllerToAgentWrapper_CancelRequest) isControllerToAgentWrapper_Event() {}

func (*ControllerToAgentWrapper_CommandRequest) isControllerToAgentWrapper_Event() {}

func (*ControllerToAgentWrapper_CommandData) isControllerToAgentWrapper_Event() {}

// Messages sent from agent to server
type AgentToControllerWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*AgentToControllerWrapper_PingRequest
	//	*AgentToControllerWrapper_HttpResponse
	//	*AgentToControllerWrapper_HttpChunkedResponse
	//	*AgentToControllerWrapper_AgentHello
	//	*AgentToControllerWrapper_CommandData
	//	*AgentToControllerWrapper_CommandTermination
	Event isAgentToControllerWrapper_Event `protobuf_oneof:"event"`
}

func (x *AgentToControllerWrapper) Reset() {
	*x = AgentToControllerWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentToControllerWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentToControllerWrapper) ProtoMessage() {}

func (x *AgentToControllerWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentToControllerWrapper.ProtoReflect.Descriptor instead.
func (*AgentToControllerWrapper) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{16}
}

func (m *AgentToControllerWrapper) GetEvent() isAgentToControllerWrapper_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *AgentToControllerWrapper) GetPingRequest() *PingRequest {
	if x, ok := x.GetEvent().(*AgentToControllerWrapper_PingRequest); ok {
		return x.PingRequest
	}
	return nil
}

func (x *AgentToControllerWrapper) GetHttpResponse() *HttpResponse {
	if x, ok := x.GetEvent().(*AgentToControllerWrapper_HttpResponse); ok {
		return x.HttpResponse
	}
	return nil
}

func (x *AgentToControllerWrapper) GetHttpChunkedResponse() *HttpChunkedResponse {
	if x, ok := x.GetEvent().(*AgentToControllerWrapper_HttpChunkedResponse); ok {
		return x.HttpChunkedResponse
	}
	return nil
}

func (x *AgentToControllerWrapper) GetAgentHello() *AgentHello {
	if x, ok := x.GetEvent().(*AgentToControllerWrapper_AgentHello); ok {
		return x.AgentHello
	}
	return nil
}

func (x *AgentToControllerWrapper) GetCommandData() *CommandData {
	if x, ok := x.GetEvent().(*AgentToControllerWrapper_CommandData); ok {
		return x.CommandData
	}
	return nil
}

func (x *AgentToControllerWrapper) GetCommandTermination() *CommandTermination {
	if x, ok := x.GetEvent().(*AgentToControllerWrapper_CommandTermination); ok {
		return x.CommandTermination
	}
	return nil
}

type isAgentToControllerWrapper_Event interface {
	isAgentToControllerWrapper_Event()
}

type AgentToControllerWrapper_PingRequest struct {
	PingRequest *PingRequest `protobuf:"bytes,1,opt,name=pingRequest,proto3,oneof"`
}

type AgentToControllerWrapper_HttpResponse struct {
	HttpResponse *HttpResponse `protobuf:"bytes,2,opt,name=httpResponse,proto3,oneof"`
}

type AgentToControllerWrapper_HttpChunkedResponse struct {
	HttpChunkedResponse *HttpChunkedResponse `protobuf:"bytes,3,opt,name=httpChunkedResponse,proto3,oneof"`
}

type AgentToControllerWrapper_AgentHello struct {
	AgentHello *AgentHello `protobuf:"bytes,4,opt,name=agentHello,proto3,oneof"`
}

type AgentToControllerWrapper_CommandData struct {
	CommandData *CommandData `protobuf:"bytes,5,opt,name=commandData,proto3,oneof"`
}

type AgentToControllerWrapper_CommandTermination struct {
	CommandTermination *CommandTermination `protobuf:"bytes,6,opt,name=commandTermination,proto3,oneof"`
}

func (*AgentToControllerWrapper_PingRequest) isAgentToControllerWrapper_Event() {}

func (*AgentToControllerWrapper_HttpResponse) isAgentToControllerWrapper_Event() {}

func (*AgentToControllerWrapper_HttpChunkedResponse) isAgentToControllerWrapper_Event() {}

func (*AgentToControllerWrapper_AgentHello) isAgentToControllerWrapper_Event() {}

func (*AgentToControllerWrapper_CommandData) isAgentToControllerWrapper_Event() {}

func (*AgentToControllerWrapper_CommandTermination) isAgentToControllerWrapper_Event() {}

// Messages sent from command-tool to controller
type CmdToolToControllerWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*CmdToolToControllerWrapper_CommandRequest
	//	*CmdToolToControllerWrapper_CommandData
	Event isCmdToolToControllerWrapper_Event `protobuf_oneof:"event"`
}

func (x *CmdToolToControllerWrapper) Reset() {
	*x = CmdToolToControllerWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdToolToControllerWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdToolToControllerWrapper) ProtoMessage() {}

func (x *CmdToolToControllerWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdToolToControllerWrapper.ProtoReflect.Descriptor instead.
func (*CmdToolToControllerWrapper) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{17}
}

func (m *CmdToolToControllerWrapper) GetEvent() isCmdToolToControllerWrapper_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *CmdToolToControllerWrapper) GetCommandRequest() *CmdToolCommandRequest {
	if x, ok := x.GetEvent().(*CmdToolToControllerWrapper_CommandRequest); ok {
		return x.CommandRequest
	}
	return nil
}

func (x *CmdToolToControllerWrapper) GetCommandData() *CmdToolCommandData {
	if x, ok := x.GetEvent().(*CmdToolToControllerWrapper_CommandData); ok {
		return x.CommandData
	}
	return nil
}

type isCmdToolToControllerWrapper_Event interface {
	isCmdToolToControllerWrapper_Event()
}

type CmdToolToControllerWrapper_CommandRequest struct {
	CommandRequest *CmdToolCommandRequest `protobuf:"bytes,1,opt,name=commandRequest,proto3,oneof"`
}

type CmdToolToControllerWrapper_CommandData struct {
	CommandData *CmdToolCommandData `protobuf:"bytes,2,opt,name=commandData,proto3,oneof"`
}

func (*CmdToolToControllerWrapper_CommandRequest) isCmdToolToControllerWrapper_Event() {}

func (*CmdToolToControllerWrapper_CommandData) isCmdToolToControllerWrapper_Event() {}

// Messages sent from the controller to the command-tool
type ControllerToCmdToolWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*ControllerToCmdToolWrapper_CommandTermination
	//	*ControllerToCmdToolWrapper_CommandData
	Event isControllerToCmdToolWrapper_Event `protobuf_oneof:"event"`
}

func (x *ControllerToCmdToolWrapper) Reset() {
	*x = ControllerToCmdToolWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerToCmdToolWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerToCmdToolWrapper) ProtoMessage() {}

func (x *ControllerToCmdToolWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerToCmdToolWrapper.ProtoReflect.Descriptor instead.
func (*ControllerToCmdToolWrapper) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnel_proto_rawDescGZIP(), []int{18}
}

func (m *ControllerToCmdToolWrapper) GetEvent() isControllerToCmdToolWrapper_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ControllerToCmdToolWrapper) GetCommandTermination() *CmdToolCommandTermination {
	if x, ok := x.GetEvent().(*ControllerToCmdToolWrapper_CommandTermination); ok {
		return x.CommandTermination
	}
	return nil
}

func (x *ControllerToCmdToolWrapper) GetCommandData() *CmdToolCommandData {
	if x, ok := x.GetEvent().(*ControllerToCmdToolWrapper_CommandData); ok {
		return x.CommandData
	}
	return nil
}

type isControllerToCmdToolWrapper_Event interface {
	isControllerToCmdToolWrapper_Event()
}

type ControllerToCmdToolWrapper_CommandTermination struct {
	CommandTermination *CmdToolCommandTermination `protobuf:"bytes,1,opt,name=commandTermination,proto3,oneof"`
}

type ControllerToCmdToolWrapper_CommandData struct {
	CommandData *CmdToolCommandData `protobuf:"bytes,2,opt,name=commandData,proto3,oneof"`
}

func (*ControllerToCmdToolWrapper_CommandTermination) isControllerToCmdToolWrapper_Event() {}

func (*ControllerToCmdToolWrapper_CommandData) isControllerToCmdToolWrapper_Event() {}

var File_pkg_tunnel_tunnel_proto protoreflect.FileDescriptor

var file_pkg_tunnel_tunnel_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x1d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73,
	0x22, 0x3a, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x63, 0x68, 0x6f, 0x65, 0x64, 0x54, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x65, 0x63, 0x68, 0x6f, 0x65, 0x64, 0x54, 0x73, 0x22, 0x38, 0x0a, 0x0a,
	0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x49, 0x12, 0x2c, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x1f, 0x0a, 0x0d, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x0c,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x39, 0x0a, 0x13, 0x48, 0x74, 0x74, 0x70,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x22, 0x74, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x15, 0x43, 0x6d, 0x64,
	0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22, 0x74, 0x0a, 0x12, 0x43, 0x6d, 0x64, 0x54, 0x6f, 0x6f, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22, 0x5a, 0x0a, 0x12, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x19, 0x43, 0x6d, 0x64, 0x54, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x0e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x22, 0x42, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x68,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xa6, 0x03,
	0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x13, 0x68, 0x74, 0x74, 0x70, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x68, 0x74, 0x74,
	0x70, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x1a, 0x43, 0x6d, 0x64, 0x54, 0x6f,
	0x6f, 0x6c, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6d, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6d, 0x64,
	0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x07,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6d, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6d, 0x64, 0x54,
	0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6d, 0x64, 0x54, 0x6f, 0x6f,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2a, 0x35, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x44, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52, 0x10, 0x02, 0x32, 0x6d, 0x0a, 0x12, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x20, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x1a, 0x20, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x73, 0x0a, 0x14, 0x43, 0x6d,
	0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x22, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6d, 0x64, 0x54, 0x6f,
	0x6f, 0x6c, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x22, 0x2e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6d, 0x64, 0x54, 0x6f,
	0x6f, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_tunnel_tunnel_proto_rawDescOnce sync.Once
	file_pkg_tunnel_tunnel_proto_rawDescData = file_pkg_tunnel_tunnel_proto_rawDesc
)

func file_pkg_tunnel_tunnel_proto_rawDescGZIP() []byte {
	file_pkg_tunnel_tunnel_proto_rawDescOnce.Do(func() {
		file_pkg_tunnel_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_tunnel_tunnel_proto_rawDescData)
	})
	return file_pkg_tunnel_tunnel_proto_rawDescData
}

var file_pkg_tunnel_tunnel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_tunnel_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_pkg_tunnel_tunnel_proto_goTypes = []interface{}{
	(ChannelDirection)(0),              // 0: tunnel.ChannelDirection
	(*PingRequest)(nil),                // 1: tunnel.PingRequest
	(*PingResponse)(nil),               // 2: tunnel.PingResponse
	(*HttpHeader)(nil),                 // 3: tunnel.HttpHeader
	(*HttpRequest)(nil),                // 4: tunnel.HttpRequest
	(*CancelRequest)(nil),              // 5: tunnel.CancelRequest
	(*HttpResponse)(nil),               // 6: tunnel.HttpResponse
	(*HttpChunkedResponse)(nil),        // 7: tunnel.HttpChunkedResponse
	(*CommandRequest)(nil),             // 8: tunnel.CommandRequest
	(*CmdToolCommandRequest)(nil),      // 9: tunnel.CmdToolCommandRequest
	(*CommandData)(nil),                // 10: tunnel.CommandData
	(*CmdToolCommandData)(nil),         // 11: tunnel.CmdToolCommandData
	(*CommandTermination)(nil),         // 12: tunnel.CommandTermination
	(*CmdToolCommandTermination)(nil),  // 13: tunnel.CmdToolCommandTermination
	(*EndpointHealth)(nil),             // 14: tunnel.EndpointHealth
	(*AgentHello)(nil),                 // 15: tunnel.AgentHello
	(*ControllerToAgentWrapper)(nil),   // 16: tunnel.ControllerToAgentWrapper
	(*AgentToControllerWrapper)(nil),   // 17: tunnel.AgentToControllerWrapper
	(*CmdToolToControllerWrapper)(nil), // 18: tunnel.CmdToolToControllerWrapper
	(*ControllerToCmdToolWrapper)(nil), // 19: tunnel.ControllerToCmdToolWrapper
}
var file_pkg_tunnel_tunnel_proto_depIdxs = []int32{
	3,  // 0: tunnel.HttpRequest.headers:type_name -> tunnel.HttpHeader
	3,  // 1: tunnel.HttpResponse.headers:type_name -> tunnel.HttpHeader
	0,  // 2: tunnel.CommandData.channel:type_name -> tunnel.ChannelDirection
	0,  // 3: tunnel.CmdToolCommandData.channel:type_name -> tunnel.ChannelDirection
	14, // 4: tunnel.AgentHello.endpoints:type_name -> tunnel.EndpointHealth
	2,  // 5: tunnel.ControllerToAgentWrapper.pingResponse:type_name -> tunnel.PingResponse
	4,  // 6: tunnel.ControllerToAgentWrapper.httpRequest:type_name -> tunnel.HttpRequest
	5,  // 7: tunnel.ControllerToAgentWrapper.cancelRequest:type_name -> tunnel.CancelRequest
	8,  // 8: tunnel.ControllerToAgentWrapper.commandRequest:type_name -> tunnel.CommandRequest
	10, // 9: tunnel.ControllerToAgentWrapper.commandData:type_name -> tunnel.CommandData
	1,  // 10: tunnel.AgentToControllerWrapper.pingRequest:type_name -> tunnel.PingRequest
	6,  // 11: tunnel.AgentToControllerWrapper.httpResponse:type_name -> tunnel.HttpResponse
	7,  // 12: tunnel.AgentToControllerWrapper.httpChunkedResponse:type_name -> tunnel.HttpChunkedResponse
	15, // 13: tunnel.AgentToControllerWrapper.agentHello:type_name -> tunnel.AgentHello
	10, // 14: tunnel.AgentToControllerWrapper.commandData:type_name -> tunnel.CommandData
	12, // 15: tunnel.AgentToControllerWrapper.commandTermination:type_name -> tunnel.CommandTermination
	9,  // 16: tunnel.CmdToolToControllerWrapper.commandRequest:type_name -> tunnel.CmdToolCommandRequest
	11, // 17: tunnel.CmdToolToControllerWrapper.commandData:type_name -> tunnel.CmdToolCommandData
	13, // 18: tunnel.ControllerToCmdToolWrapper.commandTermination:type_name -> tunnel.CmdToolCommandTermination
	11, // 19: tunnel.ControllerToCmdToolWrapper.commandData:type_name -> tunnel.CmdToolCommandData
	17, // 20: tunnel.AgentTunnelService.EventTunnel:input_type -> tunnel.AgentToControllerWrapper
	18, // 21: tunnel.CmdToolTunnelService.EventTunnel:input_type -> tunnel.CmdToolToControllerWrapper
	16, // 22: tunnel.AgentTunnelService.EventTunnel:output_type -> tunnel.ControllerToAgentWrapper
	19, // 23: tunnel.CmdToolTunnelService.EventTunnel:output_type -> tunnel.ControllerToCmdToolWrapper
	22, // [22:24] is the sub-list for method output_type
	20, // [20:22] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_pkg_tunnel_tunnel_proto_init() }
func file_pkg_tunnel_tunnel_proto_init() {
	if File_pkg_tunnel_tunnel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_tunnel_tunnel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpChunkedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdToolCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdToolCommandData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandTermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdToolCommandTermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerToAgentWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentToControllerWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdToolToControllerWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnel_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerToCmdToolWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_tunnel_tunnel_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ControllerToAgentWrapper_PingResponse)(nil),
		(*ControllerToAgentWrapper_HttpRequest)(nil),
		(*ControllerToAgentWrapper_CancelRequest)(nil),
		(*ControllerToAgentWrapper_CommandRequest)(nil),
		(*ControllerToAgentWrapper_CommandData)(nil),
	}
	file_pkg_tunnel_tunnel_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*AgentToControllerWrapper_PingRequest)(nil),
		(*AgentToControllerWrapper_HttpResponse)(nil),
		(*AgentToControllerWrapper_HttpChunkedResponse)(nil),
		(*AgentToControllerWrapper_AgentHello)(nil),
		(*AgentToControllerWrapper_CommandData)(nil),
		(*AgentToControllerWrapper_CommandTermination)(nil),
	}
	file_pkg_tunnel_tunnel_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*CmdToolToControllerWrapper_CommandRequest)(nil),
		(*CmdToolToControllerWrapper_CommandData)(nil),
	}
	file_pkg_tunnel_tunnel_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ControllerToCmdToolWrapper_CommandTermination)(nil),
		(*ControllerToCmdToolWrapper_CommandData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_tunnel_tunnel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pkg_tunnel_tunnel_proto_goTypes,
		DependencyIndexes: file_pkg_tunnel_tunnel_proto_depIdxs,
		EnumInfos:         file_pkg_tunnel_tunnel_proto_enumTypes,
		MessageInfos:      file_pkg_tunnel_tunnel_proto_msgTypes,
	}.Build()
	File_pkg_tunnel_tunnel_proto = out.File
	file_pkg_tunnel_tunnel_proto_rawDesc = nil
	file_pkg_tunnel_tunnel_proto_goTypes = nil
	file_pkg_tunnel_tunnel_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AgentTunnelServiceClient is the client API for AgentTunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentTunnelServiceClient interface {
	EventTunnel(ctx context.Context, opts ...grpc.CallOption) (AgentTunnelService_EventTunnelClient, error)
}

type agentTunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentTunnelServiceClient(cc grpc.ClientConnInterface) AgentTunnelServiceClient {
	return &agentTunnelServiceClient{cc}
}

func (c *agentTunnelServiceClient) EventTunnel(ctx context.Context, opts ...grpc.CallOption) (AgentTunnelService_EventTunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgentTunnelService_serviceDesc.Streams[0], "/tunnel.AgentTunnelService/EventTunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentTunnelServiceEventTunnelClient{stream}
	return x, nil
}

type AgentTunnelService_EventTunnelClient interface {
	Send(*AgentToControllerWrapper) error
	Recv() (*ControllerToAgentWrapper, error)
	grpc.ClientStream
}

type agentTunnelServiceEventTunnelClient struct {
	grpc.ClientStream
}

func (x *agentTunnelServiceEventTunnelClient) Send(m *AgentToControllerWrapper) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentTunnelServiceEventTunnelClient) Recv() (*ControllerToAgentWrapper, error) {
	m := new(ControllerToAgentWrapper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentTunnelServiceServer is the server API for AgentTunnelService service.
type AgentTunnelServiceServer interface {
	EventTunnel(AgentTunnelService_EventTunnelServer) error
}

// UnimplementedAgentTunnelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAgentTunnelServiceServer struct {
}

func (*UnimplementedAgentTunnelServiceServer) EventTunnel(AgentTunnelService_EventTunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method EventTunnel not implemented")
}

func RegisterAgentTunnelServiceServer(s *grpc.Server, srv AgentTunnelServiceServer) {
	s.RegisterService(&_AgentTunnelService_serviceDesc, srv)
}

func _AgentTunnelService_EventTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentTunnelServiceServer).EventTunnel(&agentTunnelServiceEventTunnelServer{stream})
}

type AgentTunnelService_EventTunnelServer interface {
	Send(*ControllerToAgentWrapper) error
	Recv() (*AgentToControllerWrapper, error)
	grpc.ServerStream
}

type agentTunnelServiceEventTunnelServer struct {
	grpc.ServerStream
}

func (x *agentTunnelServiceEventTunnelServer) Send(m *ControllerToAgentWrapper) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentTunnelServiceEventTunnelServer) Recv() (*AgentToControllerWrapper, error) {
	m := new(AgentToControllerWrapper)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AgentTunnelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.AgentTunnelService",
	HandlerType: (*AgentTunnelServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventTunnel",
			Handler:       _AgentTunnelService_EventTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/tunnel/tunnel.proto",
}

// CmdToolTunnelServiceClient is the client API for CmdToolTunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CmdToolTunnelServiceClient interface {
	EventTunnel(ctx context.Context, opts ...grpc.CallOption) (CmdToolTunnelService_EventTunnelClient, error)
}

type cmdToolTunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmdToolTunnelServiceClient(cc grpc.ClientConnInterface) CmdToolTunnelServiceClient {
	return &cmdToolTunnelServiceClient{cc}
}

func (c *cmdToolTunnelServiceClient) EventTunnel(ctx context.Context, opts ...grpc.CallOption) (CmdToolTunnelService_EventTunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CmdToolTunnelService_serviceDesc.Streams[0], "/tunnel.CmdToolTunnelService/EventTunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmdToolTunnelServiceEventTunnelClient{stream}
	return x, nil
}

type CmdToolTunnelService_EventTunnelClient interface {
	Send(*CmdToolToControllerWrapper) error
	Recv() (*ControllerToCmdToolWrapper, error)
	grpc.ClientStream
}

type cmdToolTunnelServiceEventTunnelClient struct {
	grpc.ClientStream
}

func (x *cmdToolTunnelServiceEventTunnelClient) Send(m *CmdToolToControllerWrapper) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cmdToolTunnelServiceEventTunnelClient) Recv() (*ControllerToCmdToolWrapper, error) {
	m := new(ControllerToCmdToolWrapper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CmdToolTunnelServiceServer is the server API for CmdToolTunnelService service.
type CmdToolTunnelServiceServer interface {
	EventTunnel(CmdToolTunnelService_EventTunnelServer) error
}

// UnimplementedCmdToolTunnelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCmdToolTunnelServiceServer struct {
}

func (*UnimplementedCmdToolTunnelServiceServer) EventTunnel(CmdToolTunnelService_EventTunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method EventTunnel not implemented")
}

func RegisterCmdToolTunnelServiceServer(s *grpc.Server, srv CmdToolTunnelServiceServer) {
	s.RegisterService(&_CmdToolTunnelService_serviceDesc, srv)
}

func _CmdToolTunnelService_EventTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CmdToolTunnelServiceServer).EventTunnel(&cmdToolTunnelServiceEventTunnelServer{stream})
}

type CmdToolTunnelService_EventTunnelServer interface {
	Send(*ControllerToCmdToolWrapper) error
	Recv() (*CmdToolToControllerWrapper, error)
	grpc.ServerStream
}

type cmdToolTunnelServiceEventTunnelServer struct {
	grpc.ServerStream
}

func (x *cmdToolTunnelServiceEventTunnelServer) Send(m *ControllerToCmdToolWrapper) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cmdToolTunnelServiceEventTunnelServer) Recv() (*CmdToolToControllerWrapper, error) {
	m := new(CmdToolToControllerWrapper)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CmdToolTunnelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.CmdToolTunnelService",
	HandlerType: (*CmdToolTunnelServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventTunnel",
			Handler:       _CmdToolTunnelService_EventTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/tunnel/tunnel.proto",
}
