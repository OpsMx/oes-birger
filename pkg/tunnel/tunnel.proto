syntax = "proto3";

package tunnel;

option go_package = "./;tunnel";

message PingRequest {
    uint64 ts = 1;
}

message PingResponse {
    uint64 ts = 1;
    uint64 echoedTs = 2;
}

message HttpHeader {
    string name = 1;
    repeated string values = 2;
}

message HttpRequest {
    string id = 1;
    string name = 2;
    string type = 3;
    string method = 4;
    string URI = 5;
    repeated HttpHeader headers = 6;
    bytes body = 7;
}

message CancelRequest {
    string id = 1;
}

// This is the initial response sent to the controller from the agent.
// The body is sent back in a series of HttpChunkedResponse messages,
// with a zero length meaning EOF.
message HttpResponse {
    string id = 1;
    int32 status = 2;
    repeated HttpHeader headers = 3;
    int64 contentLength = 4;
}

message HttpChunkedResponse {
    string id = 1;
    bytes body = 2;
}

message CommandRequest {
    string id = 1;
    string name = 2;
    repeated string arguments = 3;
    repeated string environment = 4;
}

// A simplified message, used for command-tool <-> controller communication.
// This does not have the "id" or "target" field, as these are set by
// the controller based on authentication used.
message CmdToolCommandRequest {
    string name = 1;
    repeated string arguments = 2;
    repeated string environment = 3;
}

enum ChannelDirection {
    STDIN = 0;
    STDOUT = 1;
    STDERR = 2;
}

message CommandData {
    string id = 1;
    bytes body = 2;
    ChannelDirection channel = 3;
    bool Closed = 4;
}

// A simplified message, used for command-tool <-> controller communication.
// This does not have the "id" or "target" field, as these are set by
// the controller based on authentication used.
message CmdToolCommandData {
    bytes body = 1;
    ChannelDirection channel = 2;
    bool Closed = 3;
}

message CommandTermination {
    string id = 1;
    int32 exitCode = 2;
    string message = 3;
}

// A simplified message, used for command-tool <-> controller communication.
// This does not have the "id" or "target" field, as these are set by
// the controller based on authentication used.
message CmdToolCommandTermination {
    int32 exitCode = 1;
    string message = 2;
}

message EndpointHealth {
    string name = 1;
    string type = 2;
    bool configured = 3;
    repeated EndpointNamespace namespace = 4;
}

message EndpointNamespace {
    string name = 1;
    repeated string namespace = 2;
}

message AgentHello {
    repeated EndpointHealth endpoints = 1;
    string agentVersion = 2;
}

// Messages sent from server to agent
message ControllerToAgentWrapper {
    oneof event {
        PingResponse pingResponse = 1;
        HttpRequest httpRequest = 2;
        CancelRequest cancelRequest = 3;
        CommandRequest commandRequest = 4;
        CommandData commandData = 5;
    }
}

// Messages sent from agent to server
message AgentToControllerWrapper {
    oneof event {
        PingRequest pingRequest = 1;
        HttpResponse httpResponse = 2;
        HttpChunkedResponse httpChunkedResponse = 3;
        AgentHello agentHello = 4;
        CommandData commandData = 5;
        CommandTermination commandTermination = 6;
    }
}

// Messages sent from command-tool to controller
message CmdToolToControllerWrapper {
    oneof event {
        CmdToolCommandRequest commandRequest = 1;
        CmdToolCommandData commandData = 2;
    }
}

// Messages sent from the controller to the command-tool
message ControllerToCmdToolWrapper {
    oneof event {
        CmdToolCommandTermination commandTermination = 1;
        CmdToolCommandData commandData = 2;
    }
}

//
// Service (runs on the controller)
//

service AgentTunnelService {
    rpc EventTunnel(stream AgentToControllerWrapper) returns (stream ControllerToAgentWrapper) {}
}

service CmdToolTunnelService {
    rpc EventTunnel(stream CmdToolToControllerWrapper) returns (stream ControllerToCmdToolWrapper) {}
}
