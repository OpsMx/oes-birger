syntax = "proto3";

package tunnel;

option go_package = "./;tunnel";

message PingRequest {
    uint64 ts = 2;
}

message PingResponse {
    uint64 ts = 2;
    uint64 echoedTs = 3;
}

message HttpHeader {
    string name = 1;
    repeated string values = 2;
}

message HttpRequest {
    string id = 1;
    string target = 2;
    string protocol = 3;
    string method = 4;
    string URI = 5;
    repeated HttpHeader headers = 6;
    bytes body = 7;
}

message CancelRequest {
    string id = 1;
    string target = 2;
}

// This is the initial response sent to the controller from the agent.
// The body is sent back in a series of HttpChunkedResponse messages,
// with a zero length meaning EOF.
message HttpResponse {
    string id = 1;
    string target = 2;
    int32 status = 3;
    repeated HttpHeader headers = 4;
    int64 contentLength = 6;
}

message HttpChunkedResponse {
    string id = 1;
    string target = 2;
    bytes body = 3;
}

message AgentHello {
    repeated string protocols = 1;
    repeated string kubernetesNamespaces = 2;
    repeated string commandNames = 3;
}

// Messages sent from server to agent
message SAEventWrapper {
    oneof event {
        PingResponse pingResponse = 1;
        HttpRequest httpRequest = 2;
        CancelRequest CancelRequest = 3;
    }
}

// Messages sent from agent to server
message ASEventWrapper {
    oneof event {
        PingRequest pingRequest = 1;
        HttpResponse httpResponse = 2;
        HttpChunkedResponse httpChunkedResponse = 3;
        AgentHello agentHello = 4;
    }
}

//
// Service (runs on the controller)
//

service TunnelService {
    rpc EventTunnel(stream ASEventWrapper) returns (stream SAEventWrapper) {}
}
