// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tunnel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TunnelServiceClient is the client API for TunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelServiceClient interface {
	EventTunnel(ctx context.Context, opts ...grpc.CallOption) (TunnelService_EventTunnelClient, error)
	SendToClient(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type tunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelServiceClient(cc grpc.ClientConnInterface) TunnelServiceClient {
	return &tunnelServiceClient{cc}
}

func (c *tunnelServiceClient) EventTunnel(ctx context.Context, opts ...grpc.CallOption) (TunnelService_EventTunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TunnelService_serviceDesc.Streams[0], "/tunnel.TunnelService/EventTunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelServiceEventTunnelClient{stream}
	return x, nil
}

type TunnelService_EventTunnelClient interface {
	Send(*EventWrapper) error
	Recv() (*EventWrapper, error)
	grpc.ClientStream
}

type tunnelServiceEventTunnelClient struct {
	grpc.ClientStream
}

func (x *tunnelServiceEventTunnelClient) Send(m *EventWrapper) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelServiceEventTunnelClient) Recv() (*EventWrapper, error) {
	m := new(EventWrapper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tunnelServiceClient) SendToClient(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/tunnel.TunnelService/SendToClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelServiceServer is the server API for TunnelService service.
// All implementations must embed UnimplementedTunnelServiceServer
// for forward compatibility
type TunnelServiceServer interface {
	EventTunnel(TunnelService_EventTunnelServer) error
	SendToClient(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedTunnelServiceServer()
}

// UnimplementedTunnelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelServiceServer struct {
}

func (UnimplementedTunnelServiceServer) EventTunnel(TunnelService_EventTunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method EventTunnel not implemented")
}
func (UnimplementedTunnelServiceServer) SendToClient(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToClient not implemented")
}
func (UnimplementedTunnelServiceServer) mustEmbedUnimplementedTunnelServiceServer() {}

// UnsafeTunnelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServiceServer will
// result in compilation errors.
type UnsafeTunnelServiceServer interface {
	mustEmbedUnimplementedTunnelServiceServer()
}

func RegisterTunnelServiceServer(s grpc.ServiceRegistrar, srv TunnelServiceServer) {
	s.RegisterService(&_TunnelService_serviceDesc, srv)
}

func _TunnelService_EventTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServiceServer).EventTunnel(&tunnelServiceEventTunnelServer{stream})
}

type TunnelService_EventTunnelServer interface {
	Send(*EventWrapper) error
	Recv() (*EventWrapper, error)
	grpc.ServerStream
}

type tunnelServiceEventTunnelServer struct {
	grpc.ServerStream
}

func (x *tunnelServiceEventTunnelServer) Send(m *EventWrapper) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelServiceEventTunnelServer) Recv() (*EventWrapper, error) {
	m := new(EventWrapper)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TunnelService_SendToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServiceServer).SendToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnel.TunnelService/SendToClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServiceServer).SendToClient(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _TunnelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.TunnelService",
	HandlerType: (*TunnelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToClient",
			Handler:    _TunnelService_SendToClient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventTunnel",
			Handler:       _TunnelService_EventTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tunnel.proto",
}
