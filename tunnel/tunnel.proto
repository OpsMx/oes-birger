syntax = "proto3";

package tunnel;

option go_package = ".;tunnel";

message PingRequest {
    uint64 ts = 2;
}

message PingResponse {
    uint64 ts = 2;
    uint64 echoedTs = 3;
}

message SigninRequest {
    string identity = 2;  // The client's identity
    uint64 startTime = 3; // The time this client started running
}

message SigninResponse {
    bool success = 2;
}

message HttpHeader {
    string name = 1;
    repeated string values = 2;
}

message HttpRequest {
    string id = 1;
    string target = 2;
    string method = 4;
    string URI = 5;
    repeated HttpHeader headers = 6;
    bytes body = 7;
}

message HttpResponse {
    string id = 1;
    string target = 2;
    int32 status = 3;
    repeated HttpHeader headers = 4;
    bytes body = 5;
}

// Messages sent from server to agent
message SAEventWrapper {
    oneof event {
        PingResponse pingResponse = 2;
        SigninResponse signinResponse = 4;
        HttpRequest httpRequest = 7;
    }
}

// Messages sent from agent to server
message ASEventWrapper {
    oneof event {
        PingRequest pingRequest = 1;
        SigninRequest signinRequest = 3;
        HttpResponse httpResponse = 7;
    }
}

service TunnelService {
    rpc EventTunnel(stream ASEventWrapper) returns (stream SAEventWrapper) {}
}
